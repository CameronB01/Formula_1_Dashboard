geom_bar(stat = "identity") +
labs(x = "Team", y = "Points") +
coord_flip() +
scale_x_reordered() +
facet_wrap(~year, ncol = 1, scales = "free_y")+
theme_minimal()+
theme(panel.grid.minor = element_blank(),
plot.background = element_rect(fill = background_color, color = background_color),
axis.text = element_text(color = axis_color, size = axis_size),
axis.text.y = element_text(hjust = 0.9),
panel.grid.major = element_line(color = grid_major_color),
panel.grid.major.y = element_blank(),
axis.title = element_text(color = title_color, size = axis_title_size),
legend.position = "none")
})
filtered_constructor_ranking <- reactive({
constructor_leaderboard$tooltip <- with(constructor_leaderboard,
paste("Points:", max_value))
subset(constructor_leaderboard, team == input$constructor_team)
})
output$constructor_ranking <- renderPlotly({
constructor_leaderboard$tooltip <- with(constructor_leaderboard,
paste("Points:", max_value))
const_plot <- ggplot(constructor_leaderboard, aes(Year, Rank)) +
geom_point(aes(text = tooltip), color = "grey") +
geom_line(data = filtered_constructor_ranking(), color = "red")+
geom_point(data = filtered_constructor_ranking(), aes(text = tooltip), color = "red")+
theme_minimal()+
theme(panel.grid.minor = element_blank(),
plot.background = element_rect(fill = background_color, color = background_color),
axis.text = element_text(color = axis_color),
axis.text.y = element_text(hjust = 0.9),
panel.grid.major = element_line(color = grid_major_color),
panel.grid.major.y = element_blank(),
axis.title = element_text(color = title_color))+
scale_x_continuous(breaks = seq(0, max(constructor_leaderboard$Year), by = 5))+
scale_y_continuous(breaks = seq(0, max(constructor_leaderboard$Rank), by = 1))
ggplotly(const_plot)%>%
layout(plot_bgcolor = "#272c30", yaxis = list(autorange = "reversed"))
})
output$every_position <- renderPlotly({
consts = result_data%>%
select(raceId, driverId, constructorId)%>%
left_join(years, by = "raceId")
race_data_position = race_data%>%
filter(year == input$driver_race_year_driver_position, Circuit == input$driver_race_circuit_driver_position)%>%
left_join(consts, by = c("driverId", "year"))%>%
left_join(constructors, by = "constructorId")%>%
mutate(team = factor(team))%>%
rename(Driver = driverRef, Lap = lap, Position = lap_times_position, Team = team)
pos_plot = ggplot(race_data_position, aes(Lap, Position, group = Driver))+
geom_line(aes(text = paste("Team:", Team)), color = "grey")+
geom_line(data = race_data_position%>%filter(Team == input$team_color), aes(text = paste("Team:", Team)), color = "red")+
labs(x = "Lap", y = "Position")+
theme_minimal()+
theme(panel.grid.minor = element_blank(),
plot.background = element_rect(fill = background_color, color = background_color),
axis.text = element_text(color = axis_color),
axis.text.y = element_text(hjust = 0.9),
panel.grid.major = element_line(color = grid_major_color),
panel.grid.major.y = element_blank(),
axis.title = element_text(color = title_color),
legend.position = "none")+
scale_x_continuous(breaks = seq(0, max(race_data_position$Lap), by = 5))+
scale_y_continuous(breaks = seq(0, length(race_data_position$Driver), by = 1))
ggplotly(pos_plot)%>%
layout(plot_bgcolor = "#272c30", yaxis = list(autorange = "reversed"))
})
output$speed_box <- renderPlot({
race_2004 = result_data_comp%>%
filter(Circuit == input$box_circuits)
race_2004 <- race_2004[complete.cases(race_2004$race_fastestLapSpeed), ]
q1_speed <- quantile(race_2004$race_fastestLapSpeed, 0.25)
q3_speed <- quantile(race_2004$race_fastestLapSpeed, 0.75)
iqr_speed <- q3_speed - q1_speed
lower_bound <- q1_speed - 1.5 * iqr_speed
upper_bound <- q3_speed + 1.5 * iqr_speed
race_2004_filtered <- race_2004 %>%
filter(race_fastestLapSpeed >= lower_bound & race_fastestLapSpeed <= upper_bound)
ggplot(race_2004_filtered, aes(x = factor(year), y = race_fastestLapSpeed)) +
geom_boxplot(color = "white", fill = "#CBCBCC") +
geom_smooth(method = "loess", se=TRUE, color="red", aes(group=1))+
labs(x = "Year", y = "Fastest Speed (km/h)") +
theme_minimal()+
theme(panel.grid.minor = element_blank(),
plot.background = element_rect(fill = background_color, color = background_color),
axis.text = element_text(color = axis_color, size = 12),
axis.text.y = element_text(hjust = 0.9, size = 12),
panel.grid.major = element_line(color = grid_major_color),
panel.grid.major.y = element_blank(),
axis.title = element_text(color = title_color, size = 15))
})
output$pit_box <- renderPlot({
pit_times_circuit = pit_times%>%
filter(Circuit == input$pit_circuit)
pit_times_circuit = na.omit(pit_times_circuit)
q1_pit <- quantile(pit_times_circuit$pit_stop_duration, 0.25)
q3_pit <- quantile(pit_times_circuit$pit_stop_duration, 0.75)
iqr_pit <- q3_pit - q1_pit
lower_bound <- q1_pit - 1.5 * iqr_pit
upper_bound <- q3_pit + 1.5 * iqr_pit
pit_times_filtered <- pit_times_circuit %>%
filter(pit_stop_duration >= lower_bound & pit_stop_duration <= upper_bound)
ggplot(pit_times_filtered, aes(x = factor(year), y = pit_stop_duration)) +
geom_boxplot(color = "white", fill = "#CBCBCC") +
geom_smooth(method = "loess", se=TRUE, color="red", aes(group=1))+
labs(x = "Year", y = "Pit Stop Time (s)") +
theme_minimal()+
theme(panel.grid.minor = element_blank(),
plot.background = element_rect(fill = background_color, color = background_color),
axis.text = element_text(color = axis_color, size = 12),
axis.text.y = element_text(hjust = 0.9, size = 12),
panel.grid.major = element_line(color = grid_major_color),
panel.grid.major.y = element_blank(),
axis.title = element_text(color = title_color, size = 15))
})
output$driver_age <- renderPlot({
standings_driver$age_at_race <-
interval(standings_driver$dob, standings_driver$race_date) %/% years(1)
average_by_year <- standings_driver %>%
group_by(year) %>%
summarise(avg_value = mean(age_at_race, na.rm = TRUE))%>%
na.omit()
ggplot(na.omit(average_by_year), aes(year, avg_value)) +
geom_point(color = "white") +
geom_smooth(color = "red") +
labs(x = "Year", y = "Age")+
theme_minimal() +
theme(
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = background_color, color = background_color),
axis.text = element_text(color = axis_color, size = 12),
axis.text.y = element_text(hjust = 0.9, size = 12),
panel.grid.major = element_line(color = grid_major_color),
panel.grid.major.y = element_blank(),
axis.title = element_text(color = title_color, size = 15)
) +
scale_x_continuous(breaks = seq(min(average_by_year$year), max(average_by_year$year), by = 10), na.value = NA) +
scale_y_continuous(breaks = seq(
round(min(average_by_year$avg_value)),
round(max(average_by_year$avg_value)),
by = 1), na.value = NA)
})
output$winners_age <- renderPlot({
max_points_per_year <- standings_driver %>%
group_by(year) %>%
filter(driver_points == max(driver_points))
max_points_per_year$age_at_win <- interval(max_points_per_year$dob, max_points_per_year$race_date) %/% years(1)
ggplot(max_points_per_year, aes(year, age_at_win))+
geom_point(color = "white", size = 1) +
geom_line(color = "white", size = 1) +
geom_smooth(color = "red") +
geom_text(aes(label = age_at_win), vjust = -1, color = "white", size = 4) +
labs(x = "Year", y = "Age")+
theme_minimal() +
theme(
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = background_color, color = background_color),
axis.text = element_text(color = axis_color, size = 12),
axis.text.y = element_text(hjust = 0.9, size = 12),
panel.grid.major = element_line(color = grid_major_color),
panel.grid.major.y = element_blank(),
axis.title = element_text(color = title_color, size = 15)
) +
scale_x_continuous(breaks = seq(min(max_points_per_year$year), max(max_points_per_year$year), by = 10), na.value = NA) +
scale_y_continuous(breaks = seq(20, 50, by = 10), limits = c(20, 50), na.value = NA)
})
output$driver_team_win <- renderPlot({
driver_team_info = result_data%>%
left_join(constructors, by = "constructorId")%>%
filter(race_position == 1)%>%
select(raceId, race_position, driverRef, year, team)
driver_team_wins = driver_team_info%>%
filter(driverRef == input$name)%>%
group_by(year, team)%>%
count(race_position)
if (nrow(driver_team_wins) == 0) {
ggplot() +
geom_text(aes(x = 0.5, y = 0.5, label = "This driver does not have any wins yet"), color = "white",  size = 15, ha = "center", va = "center") +
labs(x = "Year", y = "Number of Wins")+
theme_minimal()+
theme_minimal() +
theme(
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = background_color, color = background_color),
axis.text = element_blank(),
#panel.grid.major = element_line(color = grid_major_color),
panel.grid.major = element_blank(),
axis.title = element_text(color = title_color, size = 15),
legend.text = element_text(color = "white", size = 12),
legend.title = element_text(color = "white", size = 13)
)
} else {
ggplot(driver_team_wins, aes(year, n, fill = team))+
geom_bar(stat = "identity", width = 0.9)+
labs(x = "Year", y = "Number of Wins", fill = "Team")+
geom_text(aes(label = n), vjust = -1.2, color = "white", size = 5) +
theme_minimal() +
theme(
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = background_color, color = background_color),
axis.text = element_text(color = axis_color, size = 12),
axis.text.y = element_text(hjust = 0.9, size = 12),
#panel.grid.major = element_line(color = grid_major_color),
panel.grid.major = element_blank(),
axis.title = element_text(color = title_color, size = 15),
legend.text = element_text(color = "white", size = 12),
legend.title = element_text(color = "white", size = 13)
) +
scale_x_continuous(breaks = seq(min(driver_team_wins$year), max(driver_team_wins$year), by = 1), na.value = NA) +
scale_y_continuous(breaks = seq(0, max(driver_team_wins$n) + 1, by = 5), limits = c(0, max(driver_team_wins$n) + 1), na.value = NA)
}
})
output$driver_table <- renderDataTable({
constructor_breakdown_3 = result_data%>%
select(constructorId, driverRef, year)%>%
left_join(constructors, by = "constructorId")
new_standings_clean = standings_driver%>%
left_join(constructor_breakdown_3, by = c("driverRef", "year"))
driver_filter_table = new_standings_clean %>%
filter(year == input$table_year) %>%
group_by(driverRef) %>%
summarize(max_value = max(driver_points, na.rm = TRUE))
results_filter_table = result_data %>%
filter(year == input$table_year) %>%
mutate(race_position = as.numeric(race_position)) %>%
group_by(driverRef) %>%
mutate(win = ifelse(race_position == 1, TRUE, FALSE)) %>%
mutate(podium = ifelse(race_position <= 3, TRUE, FALSE)) %>%
mutate(score = ifelse(race_position <= 10, TRUE, FALSE)) %>%
summarize(
Wins = sum(win, na.rm = TRUE),
Podiums = sum(podium, na.rm = TRUE),
Scores = sum(score, na.rm = TRUE)
)
table_result_standings = driver_filter_table %>%
left_join(results_filter_table, by = "driverRef") %>%
arrange(desc(max_value)) %>%
rename(Points = max_value, Driver = driverRef)
datatable(table_result_standings,
options = list(scrollY = "325px",
paging = FALSE,
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#272c30', 'color': '#fff'});",
"$(this.api().column(0).nodes()).css({'background-color': '#272c30', 'color': '#fff'});",
"$(this.api().table().container()).find('.dataTables_paginate .paginate_button').css({'background-color': '#272c30', 'color': '#fff', 'border': '1px solid #fff'});",
"$(this.api().table().container()).find('.dataTables_paginate .paginate_button').removeClass('current').addClass('btn-white');",
"$(this.api().table().container()).find('.dataTables_info').css('color', '#fff');",
"$(this.api().table().container()).find('.dataTables_length').css('color', '#fff');",
"$(this.api().table().container()).find('.dataTables_filter label').css('color', '#fff');",
"}"
)
)) %>%
DT::formatStyle(1:ncol(table_result_standings), color = "white")
})
output$constructor_table <- renderDataTable({
constructor_table_leaderboard <- constructor_data %>%
filter(year == input$constructor_table_year)%>%
group_by(team, year) %>%
summarize(max_value = max(constructor_total_points))
constructor_table_leaderboard = na.omit(constructor_table_leaderboard)%>%
group_by(year)%>%
mutate(rank = dense_rank(desc(max_value)))%>%
ungroup()
results_constructor_filter_table = result_data%>%
filter(year == input$constructor_table_year)%>%
left_join(constructors, by = "constructorId")%>%
mutate(race_position = as.numeric(race_position))%>%
group_by(team)%>%
mutate(win = ifelse(race_position == 1, TRUE, FALSE)) %>%
mutate(podium = ifelse(race_position <= 3, TRUE, FALSE)) %>%
mutate(score = ifelse(race_position <= 10, TRUE, FALSE)) %>%
summarize(Wins = sum(win, na.rm = TRUE),
Podiums = sum(podium, na.rm = TRUE),
Scores = sum(score, na.rm = TRUE))
table_constructor_result_standings = constructor_table_leaderboard%>%
left_join(results_constructor_filter_table, by = "team")%>%
arrange(desc(max_value))%>%
rename(Points = max_value, Team = team)%>%
select(-rank, -year)
# table_constructor_result_standings$Team <- gsub("_", " ", table_constructor_result_standings$Team)
# table_constructor_result_standings$Team <- str_to_title(table_constructor_result_standings$Team)
datatable(table_constructor_result_standings, options = list(scrollY = "400px",
paging = FALSE, initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#272c30', 'color': '#fff'});",
"$(this.api().column(0).nodes()).css({'background-color': '#272c30', 'color': '#fff'});",
"$(this.api().table().container()).find('.dataTables_paginate .paginate_button').css({'background-color': '#272c30', 'color': '#fff', 'border': '1px solid #fff'});",
"$(this.api().table().container()).find('.dataTables_paginate .paginate_button').removeClass('current').addClass('btn-white');",
"$(this.api().table().container()).find('.dataTables_info').css('color', '#fff');",
"$(this.api().table().container()).find('.dataTables_length').css('color', '#fff');",
"$(this.api().table().container()).find('.dataTables_filter label').css('color', '#fff');",
"}")))%>%
DT::formatStyle(columns = names(table_constructor_result_standings), color="white")
})
output$home_img <- renderImage({
headshot = paste("Headshots/",drivers$full_name[drivers$driverRef == input$name],".jpg", sep = "")
list(src = headshot,
width = "auto",
height = "auto",
style = "display: block; margin-left: auto; margin-right: auto; max-width: 100%; max-height: 100%;")
}, deleteFile = F)
output$driver_accidents <- renderPlot({
status_driver_results = result_data%>%
select(raceId, constructorId, statusId, driverRef, year)
status_driver_results = status_driver_results%>%
left_join(status, by = "statusId")%>%
left_join(constructors, by = "constructorId")%>%
filter(driverRef == input$accident_driver_name)%>%
count(status)%>%
arrange(desc(n))
status_driver_results = status_driver_results[!grepl("Finished", status_driver_results$status),]
ggplot(status_driver_results, aes(reorder(status, n), n))+
geom_bar(stat = "identity", fill = "#CBCBCC")+
coord_flip()+
scale_y_continuous(breaks = seq(0, max(status_driver_results$n), by = 1))+
labs(x = "Reason", y = "Count")+
theme_minimal()+
theme(panel.grid.minor = element_blank(),
plot.background = element_rect(fill = background_color, color = background_color),
axis.text = element_text(color = axis_color, size = axis_size),
axis.text.y = element_text(hjust = 0.9),
panel.grid.major = element_line(color = grid_major_color),
panel.grid.major.y = element_blank(),
axis.title = element_text(color = title_color, size = axis_title_size),
legend.position = "none")
})
output$constructor_accidents <- renderPlot({
status_constructor_results = result_data%>%
select(raceId, constructorId, statusId, driverRef, year)
status_constructor_results = status_constructor_results%>%
left_join(status, by = "statusId")%>%
left_join(constructors, by = "constructorId")%>%
filter(team == input$accident_constructor_name, year == input$accident_constructor_year)%>%
count(status)%>%
arrange(desc(n))
status_constructor_results = status_constructor_results[!grepl("Finished", status_constructor_results$status),]
ggplot(status_constructor_results, aes(reorder(status, n), n))+
geom_bar(stat = "identity", fill = "#CBCBCC")+
coord_flip()+
scale_y_continuous(breaks = seq(0, max(status_constructor_results$n), by = 1))+
labs(x = "Reason", y = "Count")+
theme_minimal()+
theme(panel.grid.minor = element_blank(),
plot.background = element_rect(fill = background_color, color = background_color),
axis.text = element_text(color = axis_color, size = axis_size),
axis.text.y = element_text(hjust = 0.9),
panel.grid.major = element_line(color = grid_major_color),
panel.grid.major.y = element_blank(),
axis.title = element_text(color = title_color, size = axis_title_size),
legend.position = "none")
})
output$fatal_car_accidents <- renderPlot({
fatal_accidents_count = fatal_accidents%>%
count(!!sym(input$accident_type))%>%
arrange(desc(n))
ggplot(fatal_accidents_count, aes(reorder(!!sym(input$accident_type), n), n))+
geom_bar(stat = "identity", fill = "#CBCBCC")+
coord_flip()+
scale_y_continuous(breaks = seq(0, max(fatal_accidents_count$n), by = 1))+
labs(x = as.character(input$accident_type), y = "Count")+
theme_minimal()+
theme(panel.grid.minor = element_blank(),
plot.background = element_rect(fill = background_color, color = background_color),
axis.text = element_text(color = axis_color, size = axis_size),
axis.text.y = element_text(hjust = 0.9),
panel.grid.major = element_line(color = grid_major_color),
panel.grid.major.y = element_blank(),
axis.title = element_text(color = title_color, size = axis_title_size),
legend.position = "none")
})
output$safety_car_deploy <- renderPlot({
safety_car_count = safety_cars%>%
count(Cause)%>%
arrange(desc(n))
ggplot(safety_car_count, aes(reorder(Cause, n), n))+
geom_bar(stat = "identity", fill = "#CBCBCC")+
coord_flip()+
scale_y_continuous(breaks = seq(0, max(safety_car_count$n), by = 10))+
labs(x = "Reason", y = "Count")+
theme_minimal()+
theme(panel.grid.minor = element_blank(),
plot.background = element_rect(fill = background_color, color = background_color),
axis.text = element_text(color = axis_color, size = axis_size),
axis.text.y = element_text(hjust = 0.9),
panel.grid.major = element_line(color = grid_major_color),
panel.grid.major.y = element_blank(),
axis.title = element_text(color = title_color, size = axis_title_size),
legend.position = "none")
})
output$laps_heatmap <- renderPlot({
driver_order = standings_driver%>%
filter(year == input$laps_heatmap_year)%>%
group_by(driverRef)%>%
summarize(max_value = max(driver_points, na.rm = TRUE))%>%
arrange(desc(max_value))
race_laps = race_data%>%
select(lap_times_position, driverRef, year)%>%
filter(year == input$laps_heatmap_year)%>%
group_by(driverRef, lap_times_position)%>%
count(lap_times_position)
wide_race_laps <- pivot_wider(data = race_laps,
names_from = driverRef,
values_from = n)%>%
arrange(lap_times_position)
wide_race_laps[is.na(wide_race_laps)] = 0
long_race_laps <- wide_race_laps %>%
pivot_longer(cols = -lap_times_position, names_to = "driverRef", values_to = "n") %>%
arrange(lap_times_position)
long_race_laps$driverRef <- factor(long_race_laps$driverRef, levels = rev(driver_order$driverRef))
ggplot(long_race_laps, aes(lap_times_position, driverRef, fill = n, label = n)) +
geom_tile() +
geom_text(color = "white", size = 5) +
scale_fill_gradient(trans = "log", low = "#272c30", high = "#e10800", na.value = "#272c30") +
labs(x = "Postion", y = "Driver")+
theme_minimal()+
theme(panel.grid.minor = element_blank(),
plot.background = element_rect(fill = background_color, color = background_color),
axis.text = element_text(color = axis_color),
axis.text.x = element_text(color = axis_color, size = 16, face = "bold"),
axis.text.y = element_text(hjust = 0.9, size = 14),
panel.grid.major = element_blank(),
axis.title = element_text(color = title_color, size = axis_title_size),
legend.position = "none")+
scale_x_continuous(breaks = seq(1, max(long_race_laps$lap_times_position), by = 1))
})
output$race_seconds <- renderPlot({
if (input$race_seconds_checkbox) {
seconds_data_driver_1 <- race_data %>%
mutate(lap_time_seconds = lap_time_milliseconds / 1000)%>%
filter(year == input$race_seconds_year, Circuit == input$race_seconds_circuit, driverRef == input$race_seconds_driver1)
seconds_data_driver_2 <- race_data %>%
mutate(lap_time_seconds = lap_time_milliseconds / 1000)%>%
filter(year == input$race_seconds_year, Circuit == input$race_seconds_circuit, driverRef == input$race_seconds_driver2)
# q1 <- quantile(seconds_data$lap_time_seconds, 0.25)
# q3 <- quantile(seconds_data$lap_time_seconds, 0.75)
# iqr <- q3 - q1
#
# lower_bound <- q1 - 1.5 * iqr
# upper_bound <- q3 + 1.5 * iqr
#
# outliers <- seconds_data$lap_time_seconds < lower_bound | seconds_data$lap_time_seconds > upper_bound
#
# clean_lap_times <- seconds_data[!outliers, ]
remove_outliers <- function(seconds_data) {
q1 <- quantile(seconds_data$lap_time_seconds, 0.25)
q3 <- quantile(seconds_data$lap_time_seconds, 0.75)
iqr <- q3 - q1
lower_bound <- q1 - 1.5 * iqr
upper_bound <- q3 + 1.5 * iqr
outliers <- seconds_data$lap_time_seconds < lower_bound | seconds_data$lap_time_seconds > upper_bound
clean_data <- seconds_data[!outliers, ]
return(clean_data)
}
cleaned_data_driver_1 <- remove_outliers(seconds_data_driver_1)
cleaned_data_driver_2 <- remove_outliers(seconds_data_driver_2)
if (input$out_rem){
combined_drivers <- rbind(cleaned_data_driver_1, cleaned_data_driver_2)
} else {
combined_drivers <- rbind(seconds_data_driver_1, seconds_data_driver_2)
}
ggplot(combined_drivers, aes(lap, lap_time_seconds, color = driverRef))+
geom_line(size = 1)+
#geom_line(data = cleaned_data_driver_2, color = "red")+
labs(x = "Lap", y = "Seconds Per Lap", color = "Drivers")+
theme_minimal()+
theme(panel.grid.minor = element_blank(),
plot.background = element_rect(fill = background_color, color = background_color),
axis.text = element_text(color = axis_color, size = axis_size),
axis.text.y = element_text(hjust = 0.9),
panel.grid.major = element_line(color = grid_major_color),
panel.grid.major.y = element_blank(),
axis.title = element_text(color = title_color, size = axis_title_size),
legend.text = element_text(color = "white", size = 12),
legend.title = element_text(color = "white", size = 13))+
scale_x_continuous(breaks = seq(1, max(combined_drivers$lap), by = 5))
} else {
seconds_data <- race_data %>%
mutate(lap_time_seconds = lap_time_milliseconds / 1000)%>%
filter(year == input$race_seconds_year, Circuit == input$race_seconds_circuit)
q1 <- quantile(seconds_data$lap_time_seconds, 0.25)
q3 <- quantile(seconds_data$lap_time_seconds, 0.75)
iqr <- q3 - q1
lower_bound <- q1 - 1.5 * iqr
upper_bound <- q3 + 1.5 * iqr
outliers <- seconds_data$lap_time_seconds < lower_bound | seconds_data$lap_time_seconds > upper_bound
clean_lap_times <- seconds_data[!outliers, ]
if (input$out_rem) {
clean_lap_times_data = clean_lap_times
} else{
clean_lap_times_data = seconds_data
}
ggplot(clean_lap_times_data, aes(lap, lap_time_seconds, color = driverRef))+
geom_line()+
labs(x = "Lap", y = "Seconds", color = "Drivers")+
theme_minimal()+
theme(panel.grid.minor = element_blank(),
plot.background = element_rect(fill = background_color, color = background_color),
axis.text = element_text(color = axis_color, size = axis_size),
axis.text.y = element_text(hjust = 0.9),
panel.grid.major = element_line(color = grid_major_color),
panel.grid.major.y = element_blank(),
axis.title = element_text(color = title_color, size = axis_title_size),
legend.text = element_text(color = "white", size = 12),
legend.title = element_text(color = "white", size = 13))+
scale_x_continuous(breaks = seq(1, max(clean_lap_times$lap), by = 5))
}
})
}
shinyApp(ui, server)
shiny::runApp('Desktop/Stuff/School/Data Viz (502)/Project/F1_Data')
